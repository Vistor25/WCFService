//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.RemoteService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteService.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Addition", ReplyAction="http://tempuri.org/ICalculator/AdditionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CalculatorService.CustomFaultExeption), Action="http://tempuri.org/ICalculator/AdditionCustomFaultExeptionFault", Name="CustomFaultExeption", Namespace="http://schemas.datacontract.org/2004/07/CalculatorService")]
        int Addition(int firstArgument, int secondArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Addition", ReplyAction="http://tempuri.org/ICalculator/AdditionResponse")]
        System.Threading.Tasks.Task<int> AdditionAsync(int firstArgument, int secondArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Substraction", ReplyAction="http://tempuri.org/ICalculator/SubstractionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CalculatorService.CustomFaultExeption), Action="http://tempuri.org/ICalculator/SubstractionCustomFaultExeptionFault", Name="CustomFaultExeption", Namespace="http://schemas.datacontract.org/2004/07/CalculatorService")]
        int Substraction(int firstArgument, int secondArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Substraction", ReplyAction="http://tempuri.org/ICalculator/SubstractionResponse")]
        System.Threading.Tasks.Task<int> SubstractionAsync(int firstArgument, int secondArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiplication", ReplyAction="http://tempuri.org/ICalculator/MultiplicationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CalculatorService.CustomFaultExeption), Action="http://tempuri.org/ICalculator/MultiplicationCustomFaultExeptionFault", Name="CustomFaultExeption", Namespace="http://schemas.datacontract.org/2004/07/CalculatorService")]
        int Multiplication(int firstArgument, int secondArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiplication", ReplyAction="http://tempuri.org/ICalculator/MultiplicationResponse")]
        System.Threading.Tasks.Task<int> MultiplicationAsync(int firstArgument, int secondArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Division", ReplyAction="http://tempuri.org/ICalculator/DivisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CalculatorService.CustomFaultExeption), Action="http://tempuri.org/ICalculator/DivisionCustomFaultExeptionFault", Name="CustomFaultExeption", Namespace="http://schemas.datacontract.org/2004/07/CalculatorService")]
        int Division(int firstArgument, int secondArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Division", ReplyAction="http://tempuri.org/ICalculator/DivisionResponse")]
        System.Threading.Tasks.Task<int> DivisionAsync(int firstArgument, int secondArgument);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : Client.RemoteService.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<Client.RemoteService.ICalculator>, Client.RemoteService.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Addition(int firstArgument, int secondArgument) {
            return base.Channel.Addition(firstArgument, secondArgument);
        }
        
        public System.Threading.Tasks.Task<int> AdditionAsync(int firstArgument, int secondArgument) {
            return base.Channel.AdditionAsync(firstArgument, secondArgument);
        }
        
        public int Substraction(int firstArgument, int secondArgument) {
            return base.Channel.Substraction(firstArgument, secondArgument);
        }
        
        public System.Threading.Tasks.Task<int> SubstractionAsync(int firstArgument, int secondArgument) {
            return base.Channel.SubstractionAsync(firstArgument, secondArgument);
        }
        
        public int Multiplication(int firstArgument, int secondArgument) {
            return base.Channel.Multiplication(firstArgument, secondArgument);
        }
        
        public System.Threading.Tasks.Task<int> MultiplicationAsync(int firstArgument, int secondArgument) {
            return base.Channel.MultiplicationAsync(firstArgument, secondArgument);
        }
        
        public int Division(int firstArgument, int secondArgument) {
            return base.Channel.Division(firstArgument, secondArgument);
        }
        
        public System.Threading.Tasks.Task<int> DivisionAsync(int firstArgument, int secondArgument) {
            return base.Channel.DivisionAsync(firstArgument, secondArgument);
        }
    }
}
